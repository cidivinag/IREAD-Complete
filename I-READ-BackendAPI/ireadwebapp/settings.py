"""
Django settings for ireadwebapp project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
import dj_database_url
import environ
from upstash_redis import Redis
from datetime import timedelta
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent  # Moved to top

# Load environment variables from .env file
env_path = os.path.join(BASE_DIR, ".env")
print(f"Loading .env from: {env_path}")  # Debug print
load_dotenv(env_path)
print(f"DATABASE_URL from env: {os.environ.get('DATABASE_URL')}")  # Debug print for DATABASE_URL
print(f"URL: {os.environ.get('UPSTASH_REDIS_REST_URL')}")
print(f"Token: {os.environ.get('UPSTASH_REDIS_REST_TOKEN')}")

env = environ.Env()  # Keep this if you're using environ elsewhere, but load_dotenv is sufficient here

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-s&&a0=2$#%ec*n=8)g^8h=#)n9%_djwb4loen2@8ff&w+$!4ua"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "apps",
    "crispy_forms",
    "crispy_tailwind",
    "mobileapp",
    "rest_framework",
    'rest_framework.authtoken',
    "corsheaders"
]

CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"

CRISPY_TEMPLATE_PACK = "tailwind"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    'whitenoise.middleware.WhiteNoiseMiddleware', 
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
]

ROOT_URLCONF = "ireadwebapp.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "ireadwebapp.wsgi.application"

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": dj_database_url.parse(os.environ.get("DATABASE_URL")),
}
print(f"Parsed DATABASES: {DATABASES['default']}")  # Debug print for parsed database config

# Redis Configuration (Updated)
REDIS_CLIENT = Redis.from_env()  # Uses UPSTASH_REDIS_REST_URL and UPSTASH_REDIS_REST_TOKEN from .env

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "apps.Users"

LOGIN_REDIRECT_URL = "/"
LOGIN_URL = "/signin"
LOGOUT_REDIRECT_URL = "/signin"

SUPABASE_PROJECT_URL = os.environ.get("SUPABASE_PROJECT_URL")
SUPABASE_API_KEY = os.environ.get("SUPABASE_API_KEY")

CORS_ALLOW_ALL_ORIGINS = True

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",
    ),
}

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Add this configuration to your settings file
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=2),  # Extend access token lifetime to 2 hours
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),  # Refresh token lifetime can be longer, e.g., 7 days
    'ROTATE_REFRESH_TOKENS': True,  # Rotate refresh tokens for additional security
    'BLACKLIST_AFTER_ROTATION': True,  # Blacklist old refresh tokens after rotation
    'ALGORITHM': 'HS256',  # Use the HS256 algorithm (default)
    'SIGNING_KEY': 'your_secret_key',  # Replace with your actual signing key
    'AUDIENCE': None,  # Optional: Add the audience claim if needed
    'ISSUER': None,  # Optional: Add the issuer claim if needed
}

AZURE = {
  'SPEECH_KEY': os.environ.get("SPEECH_KEY"),
  'SERVICE_REGION': os.environ.get("SERVICE_REGION")
}

CSRF_TRUSTED_ORIGINS = ['https://*.onrender.com/', 'http://*.onrender.com/']