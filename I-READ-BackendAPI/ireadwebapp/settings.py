"""
Django settings for ireadwebapp project.
Generated by 'django-admin startproject' using Django 5.1.2.
"""

from pathlib import Path
from datetime import timedelta
import os
import dotenv
import dj_database_url
from upstash_redis import Redis
import environ

# Load environment variables
BASE_DIR = Path(__file__).resolve().parent.parent
env_path = BASE_DIR / ".env"
dotenv.load_dotenv(env_path)

print(f"Loading .env from: {env_path}")
print(f"DATABASE_URL from env: {os.environ.get('DATABASE_URL')}")
print(f"URL: {os.environ.get('UPSTASH_REDIS_REST_URL')}")
print(f"Token: {os.environ.get('UPSTASH_REDIS_REST_TOKEN')}")

env = environ.Env()

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-s&&a0=2$#%ec*n=8)g^8h=#)n9%_djwb4loen2@8ff&w+$!4ua"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "apps",
    "crispy_forms",
    "crispy_tailwind",
    "mobileapp",
    "rest_framework",
    "rest_framework.authtoken",
    "corsheaders"
]

CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"
CRISPY_TEMPLATE_PACK = "tailwind"

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
]

ROOT_URLCONF = "ireadwebapp.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "ireadwebapp.wsgi.application"

# Database Configuration
DEFAULT_DB = "sqlite:///db.sqlite3"
database_url = os.environ.get("DATABASE_URL", DEFAULT_DB)

DATABASES = {
    "default": dj_database_url.parse(database_url),
}

print(f"Parsed DATABASE_URL: {database_url}")
print(f"Parsed DATABASE config: {DATABASES['default']}")

# Redis Configuration (Upstash)
try:
    REDIS_CLIENT = Redis.from_env()
except KeyError as e:
    print(f"[WARN] Missing Redis config: {e}")
    REDIS_CLIENT = None

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# Static files
STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Default primary key type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom user model
AUTH_USER_MODEL = "apps.Users"

# Login settings
LOGIN_REDIRECT_URL = "/"
LOGIN_URL = "/signin"
LOGOUT_REDIRECT_URL = "/signin"

# Supabase
SUPABASE_PROJECT_URL = os.environ.get("SUPABASE_PROJECT_URL")
SUPABASE_API_KEY = os.environ.get("SUPABASE_API_KEY")

# CORS
CORS_ALLOW_ALL_ORIGINS = True

# REST Framework
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        #"api.firebase_authentication.FirebaseAuthentication",
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        "rest_framework.permissions.IsAuthenticated",
    ),
}

# JWT Settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=2),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': 'your_secret_key',
    'AUDIENCE': None,
    'ISSUER': None,
}

# Azure Cognitive Services
AZURE = {
    'SPEECH_KEY': os.environ.get("SPEECH_KEY"),
    'SERVICE_REGION': os.environ.get("SERVICE_REGION")
}

# CSRF Trusted Origins (for Render)
CSRF_TRUSTED_ORIGINS = ['https://*.onrender.com/', 'http://*.onrender.com/']
